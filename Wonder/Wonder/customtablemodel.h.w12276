/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef CUSTOMTABLEMODEL_H
#define CUSTOMTABLEMODEL_H

#include <QtCore/QAbstractTableModel>
#include <QtCore/QHash>
#include <QtCore/QRect>
#include <cuedata.h>

class CustomTableModel : public QAbstractTableModel
{
    Q_OBJECT
public:
    explicit CustomTableModel(QObject *parent = 0);
    virtual ~CustomTableModel();
    bool creatTableModel(int row);
    bool importDataToModel(int row,int col,QVariant data);
    void setList();
    int rowCount(const QModelIndex &parent = QModelIndex()) const;
    int columnCount(const QModelIndex &parent = QModelIndex()) const;
    QVariant headerData(QString table,int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;
    QVariant data(QString table,const QModelIndex &index, int role = Qt::DisplayRole) const;
    bool setData(QString table,const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
    Qt::ItemFlags flags(const QModelIndex &index) const;
    QList<CueData*> CueList;
    void addMapping(QString color, QRect area);
    void clearMapping() { m_mapping.clear(); }
    bool insertRows(int row,int count,const QModelIndex &parent);
    bool removeRows(int row,int count,const QModelIndex &parent);
public:
     QVariant artnet_data(int section);
     QVariant cue_data(int section);
     QVariant mode_data(int section);
     QVariant motor_data(int section);
     QVariant motorSetting_data(int section);
     QVariant systemSetting_data(int section);

     bool artnet_setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
     bool cue_setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
     bool mode_setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
     bool motor_setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
     bool motorSetting_setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
     bool systemSetting_setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

private:
    QHash<QString, QRect> m_mapping;
    int m_columnCount;
    int m_rowCount;
};

#endif // CUSTOMTABLEMODEL_H
